(deflisten workspaces0 :initial "[]" "MONITOR=0 ~/.config/eww/scripts/get-workspaces.mjs")
(deflisten workspaces1 :initial "[]" "MONITOR=1 ~/.config/eww/scripts/get-workspaces.mjs")
(deflisten volume :initial 0 "~/.config/eww/scripts/get-volume.sh")

(deflisten current_workspace :initial "1" "~/.config/eww/scripts/get-active-workspace.mjs")
(defwidget workspaces [workspaces]
  (eventbox :class "workspaces-widget"
    (box :space-evenly true :halign "start"
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${current_workspace?.[workspace.id] != 'null' ? "current" : ""}"
            (label :text "${workspace.id}")
          )
        )
      )
    )
  )
)

(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric icon"
    :space-evenly false
    (box :class "label icon" label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
    :onchange onchange)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    ; (box :class "info"
      ;   (label :text "" :class "icon")
      ;   (label :text "${volume}%"))
    ; (box :class "info"
      ;   (label :text "" :class "icon")
      ;   (label :text "${round(EWW_RAM.used_mem_perc, 0)}%"))
    ; (box :class "info"
      ;   (label :text "" :class "icon")
      ;   (label :text "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}%"))
    (metric :label ""
      :value volume
    :onchange "amixer -D pulse sset Master {}%")
    (metric :label ""
      :value {EWW_RAM.used_mem_perc}
    :onchange "")
    (metric :label ""
      :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
    :onchange "")))

(defwidget time []
  (box :class "time" :orientation "h" :space-evenly false :halign "end"
    {formattime(EWW_TIME, "%b %d %H:%M")}))

(defwidget bar [workspaces_data]
  (centerbox :orientation "h" :class "container"
    (workspaces :workspaces workspaces_data)
    (time)
    (sidestuff)))

(defwindow bar0
  :monitor 0
  :geometry (geometry :x "0%"
    :y "0px"
    :width "100%"
    :height "30px"
  :anchor "top center")
  :stacking "fg"
  :exclusive true
  (bar :workspaces_data workspaces0))

(defwindow bar1
  :monitor 1
  :geometry (geometry :x "0%"
    :y "0px"
    :width "100%"
    :height "30px"
  :anchor "top center")
  :stacking "fg"
  :exclusive true
  (bar :workspaces_data workspaces1))